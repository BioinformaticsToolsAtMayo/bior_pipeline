# GENERAL PROPERTIES FILE GUIDELINES
#	1.	separate lines must have "\" at the end to enable multi-line properties 
#	2.	\, tab, form feed, newline, and carriage return are written as \\, \t, \f \n, and \r, respectively 
#	3.	All lines will be wrapped automatically.  Start a line with <NOWRAP> to disable this. 

command.class=edu.mayo.bior.cli.cmd.DrillCommand

command.name=bior_drill

short.description=drills out data from a JSON column

long.description=Selectively drills out data from a JSON structure and writes them to STDOUT as additional columns.  The command reads tabular data from STDIN and assumes the last column is a JSON structure to be drilled.  For each data value to drill from a JSON structure, a corresponding JSON path must be specified.\n\
\n\

example.hgnc=\
This is a basic example of drilling data values from a JSON structure.  \
Some example tabular data with 2 columns is saved to a file named example.tsv.  \
The bior_drill command drills for the HGNC identifier and symbol from the JSON column.\n\
\n\
cat example.tsv\n\
\n\
\t#ENTREZ	HGNC_JSON\n\
\t672	{"Id":"1100","Symbol":"BRCA1","Name":"breast cancer 1, early onset"}\n\
\n\
cat example.tsv | bior_pretty_print\n\
\n\
\tCOLUMN NAME COLUMN VALUE\n\
\t----------- ------------\n\
\tENTREZ      672\n\
\tHGNC_JSON   {\n\
\t              "Id": "1100",\n\
\t              "Symbol": "BRCA1",\n\
\t              "Name": "breast cancer 1, early onset"\n\
\t            }\n\
\n\
cat example.tsv | bior_drill -p Id -p Symbol\n\
\n\
\t#ENTREZ	Id	Symbol\n\
\t672	1100	BRCA1\n\

example.1000genomes=\
This example shows how to drill data values that are nested deep inside a JSON structure.  \
Some example tabular data with 2 columns is saved to a file named example.tsv.  \
This data contains a single example variant from 1000 genomes in JSON format.  \
The bior_drill command drills for the 1000 Genomes RS identifier and the American super-population allele frequency.\n\
\n\
cat example.tsv\n\
\n\
\t#MAYO_ID	1K_GENOMES_JSON\n\
\t12345678	{"CHROM":"1","POS":"10583","ID":"rs58108140","REF":"G","ALT":"A","QUAL":"100",\\ \n\
\t        	"FILTER":"PASS","INFO":{"AF":0.14,"ASN_AF":0.13,"AMR_AF":0.17,"AFR_AF":0.04,\\ \n\
\t        	"EUR_AF":0.21}}\n\
\n\
cat example.tsv | bior_pretty_print\n\
\n\
\tCOLUMN NAME     COLUMN VALUE\n\
\t-----------     ------------\n\
\tMAYO_ID         12345678\n\
\t1K_GENOMES_JSON {\n\
\t                  "CHROM": "1",\n\
\t                  "POS": "10583",\n\
\t                  "ID": "rs58108140",\n\
\t                  "REF": "G",\n\
\t                  "ALT": "A",\n\
\t                  "QUAL": "100",\n\
\t                  "FILTER": "PASS",\n\
\t                  "INFO": {\n\
\t                    "AF": 0.14,\n\
\t                    "ASN_AF": 0.13,\n\
\t                    "AMR_AF": 0.17,\n\
\t                    "AFR_AF": 0.04,\n\
\t                    "EUR_AF": 0.21\n\
\t                  }\n\
\t                }\n\
\n\
cat examples.tsv | bior_drill -p ID -p INFO.AMR_AF\n\
\n\
\t#MAYO_ID	ID		INFO.AMR_AF\n\
\t12345678	rs58108140	0.17\n\

flag.keepJSON=\
{							\
  "opt": "k",				\
  "longOpt": "keep-json",	\
  "description": "The JSON column is kept as the last column in the output.  Default is false, which will remove the JSON column that is drilled.",	\
  "required": false,		\
  "numArgs": 0				\
}

flag.path=\
{							\
  "opt": "p",				\
  "longOpt": "path",		\
  "description": "A path that finds and extracts data out of JSON.  This option may be used multiple times to specify multiple paths.  Paths are case sensitive.",	\
  "required": true,			\
  "numArgs": 1,				\
  "argName": "JSON path"	\
}

flag.column=\
{							\
  "opt": "c",				\
  "longOpt": "column",		\
  "description": "A non-zero integer value.  Given a list of the tab delimited values in a single row, A, values A[1,2,3,...] refer to columns starting from the left of A, whereas values A[-1,-2,-3,...] refer to columns starting from the right.",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "DRILL COLUMN"	\
}