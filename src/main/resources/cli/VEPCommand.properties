# GENERAL PROPERTIES FILE GUIDELINES
#	1.	separate lines must have "\" at the end to enable multi-line properties 
#	2.	\, tab, form feed, newline, and carriage return are written as \\, \t, \f \n, and \r, respectively 
#	3.	All lines will be wrapped automatically.  Start a line with <NOWRAP> to disable this. 

command.class=edu.mayo.bior.cli.cmd.VEPCommand

command.name=bior_vep

short.description=runs VEP on variant data to get SIFT and PolyPhen output

long.description=\
The command reads VCF formatted data from STDIN and streams it directly into VEP.  \
Output is streamed to STDOUT containing the original VCF data with one additional column containing the VEP results as a JSON structure.  \
For input variants that do not have output produced by VEP, an empty JSON structure (e.g. {}) is written.  \n\
\n\
For higher performance, VEP is run in offline mode using pre-built cache files.  \
The cache file homo_sapiens_vep_69_sift_polyphen.tar.gz, dated 10/2/2012 from Ensembl, is used to get the SIFT and Polyphen data.\n\
\n\
NOTE: By default this command will select a single transcript that has the worst possible outcome as predicted by Sift/PolyPhen.  \
This differs from VEP's behavior of producing multiple transcripts per input variant.  \
To retain VEP's behavior of a single variant row becoming multiple rows, each row containing the variant plus transcript specific data, use the --all option.\n\
\n\
WARNING: The bior_vep command handles data that conforms strictly to the VCF format.  \
Any additional columns may not be handled properly.  \
For this reason, this command should not be executed after any other bior commands.

example.1=\
This is an example of running bior_vep against a variant from a VCF file.  \
Although VEP will produce multiple transcript rows for the input variant, the default behavior of bior_vep is to select a single transcript that has the worst possible outcome as predicted by Sift/PolyPhen.  \
The input variant originates from a VCF file named example.vcf.   \
The bior_vep command will take the VCF formatted data and directly stream it into VEP.  \
The output streamed to STDOUT is the same VCF formatted data with an additional column.\n\
\n\
cat example.vcf\n\
\n\
\t##fileformat=VCFv4.1\n\
\t#CHROM  POS       ID  REF  ALT  QUAL  FILTER  INFO\n\
\t17      41251803  .   T    C    100   PASS    name=value\n\
\n\
cat example.vcf | bior_vep | bior_pretty_print\n\
\n\
\t#  COLUMN NAME  COLUMN VALUE\n\
\t-  -----------  ------------\n\
\t1  CHROM        17\n\
\t2  POS          41251803\n\
\t3  ID           .\n\
\t4  REF          T\n\
\t5  ALT          C\n\
\t6  QUAL         100\n\
\t7  FILTER       PASS\n\
\t8  INFO         name=value\n\
\t9  INFO.CSQ     {\n\
\t                  "Allele": "C",\n\
\t                  "Gene": "ENSG00000012048",\n\
\t                  "Feature": "ENST00000352993",\n\
\t                  "Feature_type": "Transcript",\n\
\t                  "Consequence": "missense_variant",\n\
\t                  "cDNA_position": "768",\n\
\t                  "CDS_position": "536",\n\
\t                  "Protein_position": "179",\n\
\t                  "Amino_acids": "Y/C",\n\
\t                  "Codons": "tAc/tGc",\n\
\t                  "HGNC": "BRCA1",\n\
\t                  "SIFT": "deleterious(0.01)",\n\
\t                  "PolyPhen": "probably_damaging(0.999)",\n\
\t                  "SIFT_TERM": "deleterious",\n\
\t                  "SIFT_Score": 0.01,\n\
\t                  "PolyPhen_TERM": "probably_damaging",\n\
\t                  "PolyPhen_Score": 0.999\n\
\t                }\n\

flag.fork=\
{							\
  "opt": "fork",				\
  "longOpt": "fork",		\
  "description": "Enable forking, using the specified number of forks. Forking can dramatically improve the runtime of the script.  Using forking enables the VEP to run multiple parallel \\"threads\\", with each thread processing a subset of your input. Most modern computers have more than one processor core, so running the VEP with forking enabled can give huge speed increases (3-4x faster in most cases).  Default is 1.",\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "num_forks"	\
}
flag.pickworst=\
{							\
  "opt": "all",				\
  "longOpt": "all",		\
  "description": "Show all output from running VEP. Default is to select the worst possible outcome as predicted by Sift/PolyPhen.",\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "all"	\
}
flag.allownonvariants=\
{							\
  "opt": "allow_non_variant",				\
  "description": "When using VCF format as input and output, by default the VEP will skip non-variant lines of input (where the ALT allele is null). Enabling this option the lines will be printed in the VCF output with no consequence data added",\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "non_variants"	\
}
flag.checkalleles=\
{							\
  "opt": "check_alleles",				\
  "description": "When checking for existing variants, only report a co located variant if none of the alleles supplied are novel. For example, if the user input has alleles A/G, and an existing co located variant has alleles A/C, the co located variant will not be reported.Strand is also taken into account  in the same example, if the user input has alleles T/G but on the negative strand, then the co located variant will be reported since its alleles match the reverse complement of user input",\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "alleles"	\
}
flag.onlycoding=\
{							\
  "opt": "coding_only",				\
  "description": "Only return consequences that fall in the coding regions of transcripts",\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "coding"	\
}
flag.nointergenic=\
{							\
  "opt": "no_intergenic",				\
  "description": "Do not include intergenic consequences in the output.",\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "no_intergenic"	\
}
flag.freqpop=\
{							\
  "opt": "freq_pop",				\
  "description": "Name of the population to use in frequency filter. This can be the name of the population as it appears on the Ensembl website (suitable for most species), or in the following short form for human. 1000 genomes populations are currently pilot 1 (low coverage).",\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "pop_name"	\
}
flag.checkexisting=\
{							\
  "opt": "check_existing",				\
  "description": "Checks for the existence of variants that are co-located with your input",\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "existing"	\
}
flag.terms=\
{							\
  "opt": "t",	       \
  "longOpt": "terms",				\
  "description": "The type of consequence terms to output. The Ensembl terms are described here. The Sequence Ontology is a joint effort by genome annotation centres to standardise descriptions of biological sequences",\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "terms_name"	\
}