# GENERAL PROPERTIES FILE GUIDELINES
#	1.	separate lines must have "\" at the end to enable multi-line properties
#	2.	\, tab, form feed, newline, and carriage return are written as \\, \t, \f \n, and \r, respectively
#	3.	All lines will be wrapped automatically.  Start a line with <NOWRAP> to disable this.

command.class=edu.mayo.bior.cli.cmd.Tab2JSONCommand

command.name=bior_tab_to_tjson

short.description=converts Tab-delimited data into JSON as an additional column

long.description=\
Takes data in any Tab-Delimited format from STDIN and converts it into JSON as an additional column that is output to STDOUT.  \
The added JSON column can then be utilized by other BioR system commands.\n\
\n\
Careful construction of a configuration (config) file is requried to correctly use this command. \
  please look at the help for bior_create_config_for_tab_to_tjson for details on the format of the config file. \n\


example.1=\
This is an example of converting a simple tab delimited file to tjson using the bior_tab_to_tjson \n\
$ cat example.tsv \n\
#gene	rsID\n\
MRPL39	rs142513484\n\
MRPL39	rs200187839\n\
PANX2	rs191258266\n\
PANX2	rs145036669\n\
BRCA1	rs184237074\n\
BRCA1	rs189382442\n\
BRCA1	rs182218567\n\
\n\
The config file should also be a tab-separated file:
$ cat example.config \n\
1	gene	STRING	COLUMN	.	.\n\
2	rsID	STRING	COLUMN	.	_id\n\
3	_type	STRING	LITERAL	gene	.\n\
\n\
There should be one key for every column in the tab delimited file \n\
followed by any literals that should be injected for all values in the set \n\
The columns of the config file are as follows: \n\
\tColNum	Key	JsonType	InjectorType	Delimiter/Literal_Value	GoldenIdentifier\n\
\n\
Where \n\
\t  1) ColNum is the column number (in order) starting with 1
\t  2) Key is the name of the identifier used to describe the value in the column \n\
\t  3) JsonType describes the types of values the column can take (BOOLEAN, NUMBER, or STRING) \n\
\t  4) InjectorType defines where to get the values  (COLUMN, LITERAL, or ARRAY) \n\
\t\t      * COLUMN - the data that appears in the COLUMN will be injected into the JSON \n\
\t\t       (99% of the time this is what you want) \n\
\t\t      * LITERAL - every JSON will have the same value over the entire set \n\
\t\t      * ARRAY - the data that appears in the column is actually a delimited array \n\
\t\t        (e.g. values separated by a comma) and should be converted to a JSON array \n\
\t  5) Delimiter/Literal_Value additional information to direct the injector \n\
\t\t      * If InjectorType is COLUMN, use a period (.) \n\
\t\t      * If InjectorType is LITERAL, use the value of the literal that should be injected. \n\
\t\t      * If InjectorType is ARRAY, use the delimiter that separates elements of the array. \n\
\t  6) GoldenIdentifier \n\
\t\t      * If the column can be interpreted as a golden identifier (e.g. _landmark, _minBP) \n\
\t\t        then place it here, else place a dot (.) \n\
\t\t      * There can not be more than one golden attributed associated with a column.\n\
\t\t        users will need to use tools such as perl and awk to replicate the column \n\
\t\t        before ingesting the data. \n\
NOTE: Make sure there are no spaces after any columns, as this may insert unwanted key-value pairs.\n\
\n\
$ cat example.tsv | bior_tab_to_tjson -c example.config \n\
#gene	rsID	bior_injectIntoJson\n\
MRPL39	rs142513484	{"gene":"MRPL39","rsID":"rs142513484","_id":"rs142513484","_type":"gene"}\n\
MRPL39	rs200187839	{"gene":"MRPL39","rsID":"rs200187839","_id":"rs200187839","_type":"gene"}\n\
PANX2	rs191258266	{"gene":"PANX2","rsID":"rs191258266","_id":"rs191258266","_type":"gene"}\n\
PANX2	rs145036669	{"gene":"PANX2","rsID":"rs145036669","_id":"rs145036669","_type":"gene"}\n\
BRCA1	rs184237074	{"gene":"BRCA1","rsID":"rs184237074","_id":"rs184237074","_type":"gene"}\n\
BRCA1	rs189382442	{"gene":"BRCA1","rsID":"rs189382442","_id":"rs189382442","_type":"gene"}\n\
BRCA1	rs182218567	{"gene":"BRCA1","rsID":"rs182218567","_id":"rs182218567","_type":"gene"}\n\
$ \n\
\n\

flag.config=\
{							\
  "opt": "c",				\
  "longOpt": "config",	\
  "description": "The config file that describes how the json should be constructed.",	\
  "required": true,		\
  "numArgs": 1,				\
  "argName": "configFile"\
}
