# GENERAL PROPERTIES FILE GUIDELINES
#	1.	separate lines must have "\" at the end to enable multi-line properties 
#	2.	\, tab, form feed, newline, and carriage return are written as \\, \t, \f \n, and \r, respectively 
#	3.	All lines will be wrapped automatically.  Start a line with <NOWRAP> to disable this. 

command.class=edu.mayo.bior.cli.cmd.CreateTab2JSONConfig

command.name=bior_create_config_for_tab_to_tjson

short.description=Helps to create the config file for the bior_tab_to_tjson command.

long.description=This command helps to create the configuration file that is used by bior_tab_to_tjson.  The complete description for the structure of this file is here.  For more details on running bior_tab_to_tjson, please look at the help for that command \
A config file takes the following tab-delimited form:  \n\
Key JsonType InjectorType    Delimiter/Literal_Value    GoldenIdentifier \n\
  \n\
  Here is what each of these values means: \n\
  \n\
  0) Column# (not specified) is the column number that we wish to get the data from.  \
  The parser will insert the keys in the order that they are found in the file  \
  Followed by any literals that should be injected for all values in the set \n\
\n\
 1) Key is the name of the identifier used to describe the value in the column. \n\
  \n\
 2) JsonType is 	BOOLEAN, NUMBER, or STRING \n\
  This describes the types of values the column can take.   \n\
  \n\
 3) An injector takes the value from the tab delimited file and puts it into the JSON column.  \n\
 InjectorType is LITERAL, ARRAY, or COLUMN  \n\
 LITERAL - every JSON will have the same value over the entire set \n\
 COLUMN - the data that appears in the COLUMN will be injected into the JSON (99% of the time this is what you want) \n\
 ARRAY - the data that appears in the column is actually a delimited array (e.g. values separated by a comma) and should be converted to a JSON array  \
 \n\
 4) Delimiter/Literal_Value additional information to direct the injector  \n\
 If the injector is a COLUMN this value is just a period (.)  \n\
 If the injector is a LITERAL, this value is the value of the literal that should be injected. \n\
 If the injector is an ARRAY, this denotes the delimiter that should be used to parse the array. \n\
 \n\
 5) Golden Identifier (used to be called attribute) \n\
 If the column can be interpreted as a golden identifier (e.g. _landmark, _minBP) then place it here, else place a dot (.). \n\
 There can not be more than one golden attributed associated with a column, users will need to use tools such as perl and awk to replicate the column before ingesting the data.\n\
  \n\

example.1=Here is a basic example of creating a config file with this command. \n\
  $ cat example.tsv    \n\
  #gene	rsID           \n\
  MRPL39	rs142513484 \n\
  MRPL39	rs200187839 \n\
  PANX2	rs191258266   \n\
  PANX2	rs145036669  \n\
  BRCA1	rs184237074  \n\
  BRCA1	rs189382442  \n\
  BRCA1	rs182218567  \n\
  $ head -n 1 example.tsv  \n\
  #gene	rsID    \n\
  $ head -n 1 example.tsv | tr -d "#"  \n\
  gene	rsID \n\
  $ head -n 1 example.tsv | tr -d "#" | bior_create_config_for_tab_to_tjson  \n\
  1	gene	STRING	COLUMN	.	.   \n\
  2	rsID	STRING	COLUMN	.	.   \n\
  \n\
  $ head -n 1 example.tsv | tr -d "#" | bior_create_config_for_tab_to_tjson > example.config \n\
 \n\
  Now example.config can be used in bior_tab_to_tjson.\n\
  \n\
Under most usage scenarios, this file will need to be edited to fine tune the JSON that results \n\
  The most general usage pattern follows: \n\
bior_create_config_for_tab_to_tjson < input.header > output.config \n\
e.g. given the contents of header.tsv (tab seperated values) :  \n\
gene\trsID\tdescription \n\
bior_create_config_for_tab_to_tjson < header.tsv > output.config \n\
\n\
