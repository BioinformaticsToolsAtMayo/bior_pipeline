# GENERAL PROPERTIES FILE GUIDELINES
#	1.	separate lines must have "\" at the end to enable multi-line properties 
#	2.	\, tab, form feed, newline, and carriage return are written as \\, \t, \f \n, and \r, respectively 
#	3.	All lines will be wrapped automatically.  Start a line with <NOWRAP> to disable this. 

# DESCRIPTION:	short description of the command
# REQUIRED:		yes
# NOTES:
short.description=Runs SnpEff v2.0.5

# DESCRIPTION:	full description of the command
# REQUIRED:		yes
# NOTES:
long.description=\
Takes variant data in VCF 4.0+ format from STDIN and streams it to the SnpEff v2.0.5 application.  \
The output from SnpEff is then added as an additional JSON Column "SNPEffect" output to STDOUT.  \n\
\n\
WARNING: The SnpEff application takes roughly 1 minute to initialize prior to processing variants from the VCF file.  \
This is due in large part to SnpEff loading data into 4GB of RAM.  \
Please take the 4GB RAM requirement into account when running this command, especially when submitting a job to SGE.\n\
\n\
NOTE: The bior_snpeff command behaves almost identically to the SnpEff application except for the following options not being allowed:\n\
\t 1. Regular options: -i, -o, -chr, -onlyReg, -reg\n\
\t 2. Sequence change filter options: -nmp (no support for multiple alleles)\n\
\t 3. Results filter options: -fi\n\
\t 4. Generic options: -0, -1, -c, -h, -if, -of, -noLog, -noStats, -q, -v

# DESCRIPTION:	Definition of a command argument.  There can be zero or more.
# REQUIRED:		no
# NOTES:		property name must start with "arg." prefix
arg.message=\
{\
  "name": "GENOME_VERSION",                                             	 \
  "description": "SnpEff database for the reference genome you want to use." \
}

# DESCRIPTION:	Definition of a command option.  There can be zero or more.
# REQUIRED:		yes
# NOTES:		property name must start with "flag." prefix

#Options:
#	-a , -around            : Show N codons and amino acids around change (only in coding regions). Default is 0 codons.
#	-i <format>             : Input format [ vcf, txt, pileup, bed ]. Default: VCF.
#	-o <format>             : Ouput format [ txt, vcf, bed, bedAnn ]. Default: TXT.
#	-interval               : Use a custom interval file (you may use this option many times)
#	-chr <string>           : Prepend 'string' to chromosome name (e.g. 'chr1' instead of '1'). Only on TXT output.
#	-s,  -stats             : Name of stats file (summary). Default is 'snpEff_summary.html'
#	-ud, -upDownStreamLen   : Set upstream downstream interval length (in bases)
#	-onlyReg                : Only use regulation tracks.
#	-reg <name>             : Regulation track to use (this option can be used add several times).

flag.around=\
{							\
  "opt": "around",			\
  "description": "Show N codons and amino acids around change (only in coding regions). Default is 0 codons.",	\
  "required": false,		\
  "numArgs": 1,				\
  "argName": "N"			\
}

flag.interval=\
{							\
  "opt": "interval",		\
  "description": "Use a custom interval file (you may use this option many times)",	\
  "required": false,		\
  "numArgs": 1,				\
  "argName": "FILE"			\
}

flag.ud=\
{							\
  "opt": "ud",				\
  "description": "Set upstream downstream interval length (in bases)",	\
  "required": false,		\
  "numArgs": 1,				\
  "argName": "NUMBASES"		\
}

#Sequence change filter options:
#	-del                    : Analyze deletions only
#	-ins                    : Analyze insertions only
#	-hom                    : Analyze homozygous variants only
#	-het                    : Analyze heterozygous variants only
#	-minQ X, -minQuality X  : Filter out variants with quality lower than X
#	-maxQ X, -maxQuality X  : Filter out variants with quality higher than X
#	-minC X, -minCoverage X : Filter out variants with coverage lower than X
#	-maxC X, -maxCoverage X : Filter out variants with coverage higher than X
#	-nmp                    : Only MNPs (multiple nucleotide polymorphisms)
#	-snp                    : Only SNPs (single nucleotide polymorphisms)

flag.del=\
{							\
  "opt": "del",				\
  "description": "Analyze deletions only",	\
  "required": false,		\
  "numArgs": 0				\
}

flag.ins=\
{							\
  "opt": "ins",				\
  "description": "Analyze insertions only",	\
  "required": false,		\
  "numArgs": 0				\
}

flag.hom=\
{							\
  "opt": "hom",				\
  "description": "Analyze homozygous variants only",	\
  "required": false,		\
  "numArgs": 0				\
}
  
flag.het=\
{							\
  "opt": "het",				\
  "description": "Analyze heterozygous variants only",	\
  "required": false,		\
  "numArgs": 0				\
}

flag.minQ=\
{							\
  "opt": "minQ",			\
  "description": "Filter out variants with quality lower than X",	\
  "required": false,		\
  "numArgs": 1,				\
  "argName": "X"			\
}

flag.maxQ=\
{							\
  "opt": "maxQ",			\
  "description": "Filter out variants with quality higher than X",	\
  "required": false,		\
  "numArgs": 1,				\
  "argName": "X"			\
}

flag.minC=\
{							\
  "opt": "minC",			\
  "description": "Filter out variants with coverage lower than X",	\
  "required": false,		\
  "numArgs": 1,				\
  "argName": "X"			\
}

flag.maxC=\
{							\
  "opt": "maxC",			\
  "description": "Filter out variants with coverage higher than X",	\
  "required": false,		\
  "numArgs": 1,				\
  "argName": "X"			\
}

flag.snp=\
{							\
  "opt": "snp",				\
  "description": "Only SNPs (single nucleotide polymorphisms)",	\
  "required": false,		\
  "numArgs": 0				\
}

#Results filter options:
#	-fi  <bedFile>          : Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)
#	-no-downstream          : Do not show DOWNSTREAM changes
#	-no-intergenic          : Do not show INTERGENIC changes
#	-no-intron              : Do not show INTRON changes
#	-no-upstream            : Do not show UPSTREAM changes
#	-no-utr                 : Do not show 5_PRIME_UTR or 3_PRIME_UTR changes
#	-onlyCoding <bool>      : If true, report only coding transcripts. If false, report all transcript as if they were conding. 

flag.no-downstream=\
{							\
  "opt": "no_downstream",	\
  "description": "Do not show DOWNSTREAM changes",	\
  "required": false,		\
  "numArgs": 0				\
}

flag.no-intergenic=\
{							\
  "opt": "no_intergenic",	\
  "description": "Do not show INTERGENIC changes",	\
  "required": false,		\
  "numArgs": 0				\
}

flag.no-intron=\
{							\
  "opt": "no_intron",		\
  "description": "Do not show INTRON changes",	\
  "required": false,		\
  "numArgs": 0				\
}

flag.no-upstream=\
{							\
  "opt": "no_upstream",		\
  "description": "Do not show UPSTREAM changes",	\
  "required": false,		\
  "numArgs": 0				\
}

flag.no-utr=\
{							\
  "opt": "no_utr",			\
  "description": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes",	\
  "required": false,		\
  "numArgs": 0				\
}

flag.onlyCoding=\
{							\
  "opt": "onlyCoding",		\
  "description": "If true, report only coding transcripts. If false, report all transcript as if they were coding",	\
  "required": false,		\
  "numArgs": 1,				\
  "argName": "bool"			\
}

#Generic options:
#	-0                      : File positions are zero-based (same as '-inOffset 0 -outOffset 0')
#	-1                      : File positions are one-based (same as '-inOffset 1 -outOffset 1')
#	-c , -config            : Specify config file
#	-h , -help              : Show this help and exit
#	-if, -inOffset          : Offset input by a number of bases. E.g. '-inOffset 1' for one-based input files
#	-of, -outOffset         : Offset output by a number of bases. E.g. '-outOffset 1' for one-based output files
#	-noLog                  : Do not report usage statistics to server
#	-noStats                : Do not create stats (summary) file
#	-q , -quiet             : Quiet mode (do not show any messages or errors)
#	-v , -verbose           : Verbose mode


#bior_snpeff specific options
flag.all=\
{							\
  "opt": "all",				\
  "longOpt": "pick-all",	\
  "description": "If you want all the effects since default uses GATK-pickworst logic ",	\
  "required": false,		\
  "numArgs": 0				\
}

# DESCRIPTION:	Definition of an example.  There can be zero or more.
# REQUIRED:		no
# NOTES:		property name must start with "example." prefix

example.1=\
This is an example of using bior_snpeff to annotate most damaging effects.  \
The VCF data is a single SNP from 1000 genomes that has been trimmed for brevity and saved to a file named example.vcf.  \
By default, bior_snpeff gives only the most damaging effects according to the GATK logic.\n\
\n\
cat example.vcf\n\
\n\
\t##fileformat=VCFv4.1\n\
\t##INFO=<ID=AMR_AF,Number=1,Type=Float,Description="Allele Frequency for...">\n\
\t##INFO=<ID=EUR_AF,Number=1,Type=Float,Description="Allele Frequency for...">\n\
\t#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO\n\
\t1	10583	rs58108140	G	A	100	PASS	AMR_AF=0.17;EUR_AF=0.21\n\
\n\
cat example.vcf | bior_snpeff GRCh37.64 | bior_pretty_print\n\
\n\
\t#  COLUMN NAME  COLUMN VALUE\n\
\t-  -----------  ------------\n\
\t1  CHROM        21\n\
\t2  POS          26960070\n\
\t3  ID           rs116645811\n\
\t4  REF          G\n\
\t5  ALT          A\n\
\t6  QUAL         .\n\
\t7  FILTER       .\n\
\t8  INFO         A\n\
\t9  SNPEff       {\n\
\t                  "Effect": "NON_SYNONYMOUS_CODING",\n\
\t                  "Effect_impact": "MODERATE",\n\
\t                  "Functional_class": "MISSENSE",\n\
\t                  "Codon_change": "aCg/aTg",\n\
\t                  "Amino_acid_change": "T334M",\n\
\t                  "Gene_name": "MRPL39",\n\
\t                  "Gene_bioType": "protein_coding",\n\
\t                  "Coding": "CODING",\n\
\t                  "Transcript": "ENST00000307301",\n\
\t                  "Exon": "exon_21_26960013_26960101"\n\
\t                }\n\

example.2=\
This is an example of using bior_snpeff to annotate all variants.  \
The VCF data is a single SNP from 1000 genomes that has been trimmed for brevity and saved to a file named example.vcf. \
Notice how the single variant produces multiple effects when the -all option is used.\n\
\n\
cat example.vcf\n\
\n\
\t##fileformat=VCFv4.1\n\
\t##INFO=<ID=AMR_AF,Number=1,Type=Float,Description="Allele Frequency for...">\n\
\t##INFO=<ID=EUR_AF,Number=1,Type=Float,Description="Allele Frequency for...">\n\
\t#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO\n\
\t1	10583	rs58108140	G	A	100	PASS	AMR_AF=0.17;EUR_AF=0.21\n\
\n\
cat example.vcf | bior_snpeff -all GRCh37.64 | bior_pretty_print\n\
\n\
\t#  COLUMN NAME  COLUMN VALUE\n\
\t-  -----------  ------------\n\
\t1  CHROM        21 \n\
\t2  POS          26960070\n\
\t3  ID           rs116645811\n\
\t4  REF          G\n\
\t5  ALT          A\n\
\t6  QUAL         .\n\
\t7  FILTER       .\n\
\t8  INFO         A\n\
\t9  SNPEff       {\n\
\t                  "EFF": [\n\
\t                    {\n\
\t                      "Effect": "INTRON",\n\
\t                      "Effect_impact": "MODIFIER",\n\
\t                      "Functional_class": "NONE",\n\
\t                      "Gene_name": "MRPL39",\n\
\t                      "Gene_bioType": "protein_coding",\n\
\t                      "Coding": "CODING",\n\
\t                      "Transcript": "ENST00000352957"\n\
\t                    },\n\
\t                    {\n\
\t                      "Effect": "NON_SYNONYMOUS_CODING",\n\
\t                      "Effect_impact": "MODERATE",\n\
\t                      "Functional_class": "MISSENSE",\n\
\t                      "Codon_change": "aCg/aTg",\n\
\t                      "Amino_acid_change": "T334M",\n\
\t                      "Gene_name": "MRPL39",\n\
\t                      "Gene_bioType": "protein_coding",\n\
\t                      "Coding": "CODING",\n\
\t                      "Transcript": "ENST00000307301",\n\
\t                      "Exon": "exon_21_26960013_26960101"\n\
\t                    }\n\
\t                  ]\n\
\t                }\n\