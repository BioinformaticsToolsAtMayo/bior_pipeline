# GENERAL PROPERTIES FILE GUIDELINES
#	1.	separate lines must have "\" at the end to enable multi-line properties 
#	2.	\, tab, form feed, newline, and carriage return are written as \\, \t, \f \n, and \r, respectively 
#	3.	All lines will be wrapped automatically.  Start a line with <NOWRAP> to disable this. 

# DESCRIPTION:	short description of the command
# REQUIRED:		yes
# NOTES:
short.description=Runs the SNPEffect Pipeline(SNPff v2.0.5)

# DESCRIPTION:	full description of the command
# REQUIRED:		yes
# NOTES:
long.description=\
Takes variant data in VCF 4.0+ format from STDIN and outputs VCF file with SNPEffect result added as an additional JSON Column "SNPEffect".  \
\n\
\n\
\t Please be aware SNPEffect command takes a while to boot \n\
\t Please be aware SNPEffect does not support mnps or mutilple alleles\n\
\t We do not support all the native flags of SNPEff 2.0.5 currently\n\
\t List of Options currently not supported\n\
\t -nmp, -fi,-chr,-onlyReg,-reg <track>,-0,-1,-if,-of \n\
Although the VCF header is not strictly required, it is highly recommended for the following reasons:\n\
\t1. JSON structure has correct datatypes for INFO fields\n\
\t2. JSON structure correctly builds JSON arrays for multi-value INFO fields\n\
\t3. Column names are represented in the data for readability\n\

# DESCRIPTION:	Definition of an example.  There can be zero or more.
# REQUIRED:		no
# NOTES:		property name must start with "example." prefix

example.1=\
This is an example of using BioR SNPEFF tool to annotate most damaging effects.  \
The VCF data is a single SNP from 1000 genomes that has been trimmed for brevity and saved to a file named example.vcf.  \
You can use filters if you want dont need all annotations and need only a subset that are of functional significance to your project needs.\
\n\
cat example.vcf\n\
\n\
\t##fileformat=VCFv4.1\n\
\t##INFO=<ID=AMR_AF,Number=1,Type=Float,Description="Allele Frequency for...">\n\
\t##INFO=<ID=EUR_AF,Number=1,Type=Float,Description="Allele Frequency for...">\n\
\t#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO\n\
\t1	10583	rs58108140	G	A	100	PASS	AMR_AF=0.17;EUR_AF=0.21\n\
\n\
\t Bior SNPEff pipeline by default gives only most damaging effects according to GATK logic\n\
cat example.vcf | bior_snpeff | bior_pretty_print\n\
\t#  COLUMN NAME  COLUMN VALUE\n\
\t-  -----------  ------------\n\
\t1  CHROM        21\n\
\t2  POS          26960070\n\
\t3  ID           rs116645811\n\
\t4  REF          G\n\
\t5  ALT          A\n\
\t6  QUAL         .\n\
\t7  FILTER       .\n\
\t8  INFO         A\n\
\t9  SNPEff       {\n\
\t                  "Effect": "NON_SYNONYMOUS_CODING",\n\
\t                  "Effect_impact": "MODERATE",\n\
\t                  "Functional_class": "MISSENSE",\n\
\t                  "Codon_change": "aCg/aTg",\n\
\t                  "Amino_acid_change": "T334M",\n\
\t                  "Gene_name": "MRPL39",\n\
\t                  "Gene_bioType": "protein_coding",\n\
\t                  "Coding": "CODING",\n\
\t                  "Transcript": "ENST00000307301",\n\
\t                  "Exon": "exon_21_26960013_26960101"\n\
\t                }\n\

example.2=\
This is an example of using BioR SNPEFF tool to annotate all variants.  \
The VCF data is a single SNP from 1000 genomes that has been trimmed for brevity and saved to a file named example.vcf.  \
You can use filters if you want dont need all annotations and need only a subset that are of functional significance to your project needs.\
\n\
cat example.vcf\n\
\n\
\t##fileformat=VCFv4.1\n\
\t##INFO=<ID=AMR_AF,Number=1,Type=Float,Description="Allele Frequency for...">\n\
\t##INFO=<ID=EUR_AF,Number=1,Type=Float,Description="Allele Frequency for...">\n\
\t#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO\n\
\t1	10583	rs58108140	G	A	100	PASS	AMR_AF=0.17;EUR_AF=0.21\n\
\n\
\t Command to get all effects \n\
cat example.vcf | bior_snpeff -all | bior_pretty_print\n\
\n\
\t#  COLUMN NAME  COLUMN VALUE\n\
\t-  -----------  ------------\n\
\t1  CHROM        21 \n\
\t2  POS          26960070\n\
\t3  ID           rs116645811\n\
\t4  REF          G\n\
\t5  ALT          A\n\
\t6  QUAL         .\n\
\t7  FILTER       .\n\
\t8  INFO         A\n\
\t9  SNPEff       {\n\
\t                  "EFF": [\n\
\t                    {\n\
\t                      "Effect": "INTRON",\n\
\t                      "Effect_impact": "MODIFIER",\n\
\t                      "Functional_class": "NONE",\n\
\t                      "Gene_name": "MRPL39",\n\
\t                      "Gene_bioType": "protein_coding",\n\
\t                      "Coding": "CODING",\n\
\t                      "Transcript": "ENST00000352957"\n\
\t                    },\n\
\t                    {\n\
\t                      "Effect": "NON_SYNONYMOUS_CODING",\n\
\t                      "Effect_impact": "MODERATE",\n\
\t                      "Functional_class": "MISSENSE",\n\
\t                      "Codon_change": "aCg/aTg",\n\
\t                      "Amino_acid_change": "T334M",\n\
\t                      "Gene_name": "MRPL39",\n\
\t                      "Gene_bioType": "protein_coding",\n\
\t                      "Coding": "CODING",\n\
\t                      "Transcript": "ENST00000307301",\n\
\t                      "Exon": "exon_21_26960013_26960101"\n\
\t                    }\n\
\t                  ]\n\
\t                }\n\

# DESCRIPTION:	Definition of a command option.  There can be zero or more.
# REQUIRED:		yes
# NOTES:		property name must start with "flag." prefix
flag.inputformat=\
{							\
 "opt": "i",				\
  "longOpt": "input-format",	\
  "argName": "inputformat", \
  "description": "The Input file format.VCF is default",	\
  "required": false,			\
  "numArgs": 0				\
}

flag.outputformat=\
{							\
  "opt": "o",				\
  "longOpt": "output-format",		\
  "description": "Output format is default VCF",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "Output Format"	\
}

flag.deletions=\
{							\
  "opt": "del",				\
  "longOpt": "output-format",		\
  "description": "Sequence filter consider only deletions",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "deletions"	\
}
flag.insertions=\
{							\
  "opt": "ins",				\
  "longOpt": "only-insertions",		\
  "description": "Sequence filter consider only insertions",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "insertions"	\
}
flag.homozygous=\
{							\
  "opt": "hom",				\
  "longOpt": "only-homozygous",		\
  "description": "Sequence filter consider only homozygous variants",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "homozygous"	\
}  
flag.heterozygous=\
{							\
  "opt": "het",				\
  "longOpt": "only-heterozygous",		\
  "description": "Sequence filter consider only heterozygous variants",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "heterozygous"	\
}    
flag.minimumquality=\
{							\
  "opt": "minQ",				\
  "longOpt": "minimumQ",		\
  "description": "Filterout variants with quality lower than X",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "no"	\
}
flag.maximumquality=\
{							\
  "opt": "maxQ",				\
  "longOpt": "maximumQ",		\
  "description": "Filterout variants with quality higher than X",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "no"	\
}
flag.minimumcoverage=\
{							\
  "opt": "minC",				\
  "longOpt": "minimumC",		\
  "description": "Filterout variants with coverage lower than X",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "no"	\
}
flag.maximumcoverage=\
{							\
  "opt": "maxC",				\
  "longOpt": "maximumC",		\
  "description": "Filterout variants with coverage higher than X",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "no"	\
}
flag.onlyCoding=\
{							\
  "opt": "onlyCoding",				\
  "longOpt": "onlyCoding",		\
  "description": "If true, report only coding transcripts. If false, report all transcript as if they were coding",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "boolean-onlycoding"	\
}
flag.ud=\
{							\
  "opt": "ud",				\
  "longOpt": "updownstream",		\
  "description": "upstream downsteam interval",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "number-updownstream"	\
}
flag.interval=\
{							\
  "opt": "interval",				\
  "longOpt": "interval",		\
  "description": "interval",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "interval-file"	\
}
flag.aminoacids=\
{							\
  "opt": "around",				\
  "longOpt": "around",		\
  "description": "Show N codons and amino acids around change.Default is 0",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "n-codons"	\
}
flag.noupstream=\
{							\
  "opt": "noupstream",				\
  "longOpt": "no-upstream",		\
  "description": "Do not show upstream",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "donotshow-upstream"	\
}
flag.noutr=\
{							\
  "opt": "noutr",				\
  "longOpt": "no-utr",		\
  "description": "Do not show 5_PRIME_UTR or 3_PRIME_UTR change",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "donotshow-utr"	\
}
flag.nodownstream=\
{							\
  "opt": "nodownstream",				\
  "longOpt": "No downstream",		\
  "description": "Do not show downstream",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "donotshow-downstream"	\
}  
flag.nointergenic=\
{							\
  "opt": "nointergenic",				\
  "longOpt": "No intergenic",		\
  "description": "Do not show intergenic",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "donotshow-intergenic"	\
}  
flag.nointron=\
{							\
  "opt": "nointron",				\
  "longOpt": "No intron",		\
  "description": "Do not show intron",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "donotshow-intron"	\
}
flag.snpsonly=\
{							\
  "opt": "snp",				\
  "longOpt": "only-snps",		\
  "description": "Sequence filter consider only SNP variants",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "snps"	\
}
flag.all=\
{							\
  "opt": "all",				\
  "longOpt": "pick-all",		\
  "description": "If you want all the effects since default uses GATK-pickworst logic ",	\
  "required": false,			\
  "numArgs": 0,				\
  "argName": "pick-all"	\
}
 