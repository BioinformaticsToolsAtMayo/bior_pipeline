# GENERAL PROPERTIES FILE GUIDELINES
#	1.	separate lines must have "\" at the end to enable multi-line properties 
#	2.	\, tab, form feed, newline, and carriage return are written as \\, \t, \f \n, and \r, respectively 
#	3.	All lines will be wrapped automatically.  Start a line with <NOWRAP> to disable this. 

# DESCRIPTION:	short description of the command
# REQUIRED:		yes
# NOTES:
short.description=runs VEP on variant data to get SIFT and PolyPhen output

# DESCRIPTION:	full description of the command
# REQUIRED:		yes
# NOTES:
long.description=\
The command reads VCF formatted data from STDIN and streams it directly into the VEP command.  \
Output is streamed to STDOUT containing the original VCF data with one additional column containing the VEP results as a JSON structure.  \
For input variants that do not have output produced by VEP, an empty JSON structure (e.g. {}) is written.  \n\
\n\
NOTE: VEP produces multiple transcripts per input variant.  \
This will cause a single variant row to become multiple rows, each row containing the variant plus transcript specific data.\n\
\n\
WARNING: The bior_vep command handles data that conforms strictly to the VCF format.  \
Any additional columns may not be handled properly.  \
For this reason, this command should not be executed after any other bior commands.

# DESCRIPTION:	Definition of an example.  There can be zero or more.
# REQUIRED:		no
# NOTES:		property name must start with "example." prefix
example.1=\
This is an example of running VEP against variants from a VCF file.  \
The input variant originates from a VCF file named example.vcf.   \
The bior_vep command will take the VCF formatted data and directly stream it into VEP.  \
The output streamed to STDOUT is the same VCF formatted data with an additional VEP results column.\n\
\n\
cat example.vcf\n\
\n\
\t##fileformat=VCFv4.1\n\
\t#CHROM  POS       ID  REF  ALT  QUAL  FILTER  INFO\n\
\t17      41251803  .   T    C    100   PASS    name=value\n\
\n\
cat example.vcf | bior_vep | bior_pretty_print\n\
\n\
\t#  COLUMN NAME  COLUMN VALUE\n\
\t-  -----------  ------------\n\
\t1  CHROM        17\n\
\t2  POS          41251803\n\
\t3  ID           .\n\
\t4  REF          T\n\
\t5  ALT          C\n\
\t6  QUAL         100\n\
\t7  FILTER       PASS\n\
\t8  INFO         name=value\n\
\t9  VEP          {\n\
\t                  "Allele": "C",\n\
\t                  "DISTANCE": "",\n\
\t                  "Gene": "ENSG00000012048",\n\
\t                  "cDNA_position": 768,\n\
\t                  "PolyPhen_TERM": "probably_damaging",\n\
\t                  "Feature_type": "Transcript",\n\
\t                  "Feature": "ENST00000352993",\n\
\t                  "Protein_position": 179,\n\
\t                  "Amino_acids": "Y/C",\n\
\t                  "SIFT_TERM": "deleterious",\n\
\t                  "CDS_position": 536,\n\
\t                  "Consequence": "missense_variant",\n\
\t                  "Existing_variation": "",\n\
\t                  "PolyPhen": "probably_damaging(0.999)",\n\
\t                  "Codons": "tAc/tGc",\n\
\t                  "SIFT": "deleterious(0.01)",\n\
\t                  "PolyPhen_Score": 0.999,\n\
\t                  "SIFT_Score": 0.01\n\
\t                }\n\


# DESCRIPTION:	Definition of a command option.  There can be zero or more.
# REQUIRED:		yes
# NOTES:		property name must start with "flag." prefix
flag.buffer=\
{							\
  "opt": "b",				\
  "longOpt": "buffer",		\
  "description": "Sets the internal buffer size, corresponding to the number of variations that are read in to memory simultaneously. Set this lower to use less memory at the expense of longer run time, and higher to use more memory with a faster run time.  Default is 50.",\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "size"	\
}

flag.fork=\
{							\
  "opt": "f",				\
  "longOpt": "fork",		\
  "description": "Enable forking, using the specified number of forks. Forking can dramatically improve the runtime of the script.  Using forking enables the VEP to run multiple parallel \\"threads\\", with each thread processing a subset of your input. Most modern computers have more than one processor core, so running the VEP with forking enabled can give huge speed increases (3-4x faster in most cases).  Default is 1.",\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "num_forks"	\
}