# GENERAL PROPERTIES FILE GUIDELINES
#	1.	separate lines must have "\" at the end to enable multi-line properties 
#	2.	\, tab, form feed, newline, and carriage return are written as \\, \t, \f \n, and \r, respectively 
#	3.	All lines will be wrapped automatically.  Start a line with <NOWRAP> to disable this. 

# DESCRIPTION:	short description of the command
# REQUIRED:		yes
# NOTES:
short.description=Searches for a given id or string in a catalog

# DESCRIPTION:	full description of the command
# REQUIRED:		yes
# NOTES:
long.description=Searches for a given Id in a catalog and writes the JSON column to STDOUT.\n\
\n\

# DESCRIPTION:	Definition of an example.  There can be zero or more.
# REQUIRED:		no
# NOTES:		property name must start with "example." prefix
example.rsId=\
Given a file with rsIDs: \
e.g. \n\
$ cat rsid.txt \n\ 
rs1060915 \n\
rs147856441 \n\
rs147856441 \n\
rs149071245 \n\
rs149071245 \n\n\ 
To find these rsIDs in a dbSNP catalog ($CATALOG_HOME/dbSNP/137/00-All_GRCh37.tsv.bgz) \
use the lookup command as follows: \n\
$ cat rsid.txt | bior_lookup -p ID /data/catalogs/dbSNP/137/00-All_GRCh37.tsv.bgz \n\
The resulting rows will look something like: \n\ 
#  COLUMN NAME  COLUMN VALUE  \n\
-  -----------  ------------ \n\
1  ID           rs1060915 \n\
2  LookupPipe   { \n\
                  "CHROM": "17", \n\
                  ... \n\
                  "_id": "rs1060915", \n\
                  "_type": "variant", \n\
                  "_landmark": "17", \n\
                  "_refAllele": "A", \n\
                  "_altAlleles": [ \n\
                    "G" \n\
                  ], \n\
                  "_minBP": 41234470, \n\
                  "_maxBP": 41234470 \n\
                } \n\
 This can then be used as the input to bior_overlap and other commands to get additional annotation \n\

# DESCRIPTION:  Definition of a command argument.  There can be zero or more.
# REQUIRED:     yes
# NOTES:        property name must start with "arg." prefix
#               To keep arguments in order, use arg.1.name  arg.2.name, ...
#               the order of how these properties are defined mirrors the order on the command line 
flag.catalogFile=\
{							\
  "opt": "d",				\
  "longOpt": "catalogFile",		\
  "description": "The catalog file (bgzip format) that will be indexed.",	\
  "required": true,			\
  "numArgs": 1,				\
  "argName": "CATALOG FILE PATH"	\
}

flag.jsonPath=\
{							\
  "opt": "p",				\
  "longOpt": "pathJson",		\
  "description": "A JSON path that will be used to find and extract data from JSON.  Paths are case sensitive.",	\
  "required": true,			\
  "numArgs": 1,				\
  "argName": "JSON path"	\
}

# DESCRIPTION:	Definition of a command option.  There can be zero or more.
# REQUIRED:		yes
# NOTES:		property name must start with "flag." prefix
flag.indexfile=\
{							\
  "opt": "x",				\
  "longOpt": "indexfile",	\
  "description": "The index file of a Catalog to perform the search.",	\
  "required": false,		\
  "numArgs": 1,				\
  "argName": "INDEX FILE PATH"\
}

flag.column=\
{							\
  "opt": "c",				\
  "longOpt": "column",		\
  "description": "A non-zero integer value.  Given History[] is an array(list) of the tab delimited values in a single row of input, values [1,2,3,...] index columns starting from the left of the History array, values [-1,-2,-3,...] index columns starting from the right.",	\
  "required": false,			\
  "numArgs": 1,				\
  "argName": "DRILL COLUMN"	\
}
